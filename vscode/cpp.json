{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print templates": {
		"prefix": "printhelpers",
		"body": [
			"void dbg_out() { cerr << endl; }",
			"template<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }",
			"#define dbg(...) cerr << \"(\" << #__VA_ARGS__ << \"):\", dbg_out(__VA_ARGS__)",
			"",
			"template <typename T>",
			"void print(const vector<T>& a, const string& name = \"\") {",
			"	if (!name.empty()) cout << name << \": \";",
			"	for (const auto& item : a) {",
			"		cout << item << \" \";",
			"	}",
			"	cout << endl;",
			"}",
			"",
			"template <typename T1, typename T2>",
			"void print(const pair<T1, T2>& p, const string& name = \"\") {",
			"	if (!name.empty()) cout << name << \": \";",
			"	cout << \"(\" << p.first << \", \" << p.second << \") \" << endl;",
			"}",
			"",
			"template <typename T1, typename T2>",
			"void print(const vector<pair<T1, T2>>& pairs, const string& name = \"\") {",
			"	if (!name.empty()) cout << name << \": \";",
			"	for (const auto& pair : pairs) {",
			"		cout << \"(\" << pair.first << \", \" << pair.second << \") \";",
			"	}",
			"	cout << endl;",
			"}",
			"",
			"template <typename T, typename Compare>",
			"void print(const set<T, Compare>& s, const string& name = \"\") {",
			"	if (!name.empty()) cout << name << \": \";",
			"	for (const auto& element : s) {",
			"		cout << element << \" \";",
			"	}",
			"	cout << endl;",
			"}",
			"",
			"template <typename T1, typename T2, typename Compare>",
			"void print(const map<T1, T2, Compare>& m, const string& name = \"\") {",
			"	if (!name.empty()) cout << name << \": \";",
			"	for (const auto& p : m) {",
			"		cout << \"(\" << p.first << \", \" << p.second << \") \";",
			"	}",
			"	cout << endl;",
			"}",
			"",
			"template <typename T>",
			"void print(const unordered_set<T>& s, const string& name = \"\") {",
			"	if (!name.empty()) cout << name << \": \";",
			"	for (const auto& element : s) {",
			"		cout << element << \" \";",
			"	}",
			"	cout << endl;",
			"}",
			"",
			"template <typename T1, typename T2>",
			"void print(const unordered_map<T1, T2>& m, const string& name = \"\") {",
			"	if (!name.empty()) cout << name << \": \";",
			"	for (const auto& p : m) {",
			"		cout << \"(\" << p.first << \", \" << p.second << \") \";",
			"	}",
			"	cout << endl;",
			"}",
			"",
			"template <typename T>",
			"void print(const vector<vector<T>>& matrix, const string& name = \"\") {",
			"	if (!name.empty()) cout << name << \": \" << endl;",
			"	for (const auto& row : matrix) {",
			"		for (const auto& element : row) {",
			"			cout << element << \" \";",
			"		}",
			"		cout << endl;",
			"	}",
			"}",
		],
		"description": "Template to print things"
	},
	"Codeforces one test case template": {
		"prefix": "cfone",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"int main() {",
			"",
			"}",
		],
		"description": "Codeforces one test case template"
	},
	"Codeforces multiple test cases template": {
		"prefix": "cfmultiple",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"void solve() {",
			"",
			"}",
			"",
			"int main() {",
			"  int num_cases;",
			"  cin >> num_cases;",
			"  for (int i = 0; i < num_cases; ++i) {",
			"    solve();",
			"  }",
			"}",
			
		],
		"description": "Codeforces multiple test cases template"
	},
	"CodeJam template": {
		"prefix": "codejam",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"void solve() {",
			"",
			"}",
			"",
			"int main() {",
			"  int num_cases;",
			"  cin >> num_cases;",
			"  for (int i = 0; i < num_cases; ++i) {",
			"    cout << \"Case #\" << i + 1 << \": \";",
			"    solve();",
			"  }",
			"}",
			
		],
		"description": "CodeJam template"
	},
	"Topcoder template": {
		"prefix": "topcoder",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"class Solution {",
			" public:",
			" ",
			"};",
			"int main() {",
			"",
			"}",
		],
		"description": "CodeJam template"
	},
	"Generate test case template": {
		"prefix": "generate",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"int64_t g(int64_t l, int64_t r) {",
			"  return l + (rand() % (r - l + 1));",
			"}",
			"",
			"string generateRandomBitString(int N) {",
			"	string s;",
			"	for (int i = 0; i < N; ++i) {",
			"		const char c = (g(0, 1) == 0) ? '0' : '1';",
			"		s += c;",
			"	}",
			"	return s;",
			"}",
			"",
			"int main(int argc, char *argv[]) {",
			"  int seed = stoi(argv[1]);",
			"  srand(seed);",
			"}",
		],
		"description": "Template to generate random test case"
	},	
	"Execution time": {
		"prefix": "execution_time",
		"body": [
			"#include <chrono>",
			"auto start = std::chrono::system_clock::now();",
			"auto end = std::chrono::system_clock::now();",
			"std::chrono::duration<double> elapsed_seconds = end-start;",
			"std::time_t end_time = std::chrono::system_clock::to_time_t(end);",
			"std::cout << \"Elapsed time: \" << elapsed_seconds.count() << std::endl;",
		],
		"description": "Measure execution time"
	},
}






